<?xml version="1.0" encoding="utf-8"?>
<program xmlns="http://www.kinoma.com/kpr/1">
	<variable id="concent" value="20" /> 
        
	<texture id="iconTexture" small="./assets/brainwave_state.png"/>
	
<column id="HighStriker" left="0" bottom = "-150" right="0" anchor = "STRIKER">
	    <picture anchor = "BELL" name = "bell" left="0" height="110" right="0" url="'./assets/HighStriker_bell.png'">
	        <behavior>
                <method id="onLoaded" params="picture">
                    <![CDATA[
                        bellHeight = picture.height
                    ]]>
                </method>
            </behavior>
	        
	    </picture>

	    <container anchor = "SLIDER_RINGER" height = "1171">
		    <picture anchor = "SLIDER" name = "slider" height="1171" url="'./assets/HighStriker_slide.png'" >
		        <behavior>
	                <method id="onLoaded" params="picture">
	                    <![CDATA[
	                        sliderRange = picture.height
	                    ]]>
	                </method>
	            </behavior>
		    </picture>
		    <picture anchor = "RINGER" bottom = "0" name = "ringer" url="'./assets/ringer.png'"  >
		    	<behavior>
		    		<method id="onCreate" params="ringer">
                        <![CDATA[
	                        lastAttention = 0
		           			this.slowingFactor = 2
                        ]]>
                    </method>
	                <method id="onLoaded" params="ringer">
	                    <![CDATA[
	                    	// need to subtract the bottom two thirds of the ringer's current height
	                    	//so that the top of the slider range is where the ringer's top just barely hits
	                    	// (Top ~third of the ringer image is just drop shadow.)
	                        sliderRange -= Math.round((ringer.height*.64))
		           			this.endBottom = ringer.coordinates.bottom
	                    ]]>
	                </method>
	                <method id="onAttentionChanged" params="ringer,result">
			            <![CDATA[
			                var attention = result.attention
							var heightFraction = attention / 100
							this.following = false // "camera" hasn't started yet
			                if(attention != lastAttention) {
								this.startBottom = ringer.coordinates.bottom;
								this.endBottom =  Math.round(heightFraction * sliderRange);
								if(attention == 100 ) {
									state = WIN;
								} else {
									state = MOVING;
								}
								delta = this.endBottom - this.startBottom
								// Duration is never less than a quarter second
								theDuration = Math.round(Math.abs(delta) / (sliderRange - 250) * sliderRange * this.slowingFactor) + 250
								ringer.time = 0;
								ringer.duration = theDuration
								ringer.start()
							}
			            	lastAttention = attention
							this.prevBottom = this.endBottom
						]]>
			        </method>
                    <method id="onTimeChanged" params="ringer">
			            <![CDATA[
			                var ringerCoords = ringer.coordinates
			                if(state == WIN | ringerCoords.bottom == 0) { // hit the extents
			                    this.easeType = "backEaseOut"
			                } else {
			                	this.easeType = "quadEaseOut"
							}	                	
			                if (ringer.time < 0.5) this.easeType = "quintEaseIn";
		                    ringerCoords.bottom = tween(ringer.time,ringer.duration,this.startBottom,this.endBottom, this.easeType)
			            	ringer.coordinates = ringerCoords
			            	// start the "camera" following a little later
			            	if(ringer.time/ringer.duration > 0.15 && this.following == false) {
								application.distribute("onCameraFollow", Math.abs(delta));
								this.following = true // only once per attentionChange
							}			            	
			            ]]>
			        </method>
			        <method id="onFinished" params="ringer">
                        <![CDATA[
                        	if(state == WIN) {
								ringer.stop()
								var bellSound =  new Sound("./assets/bell.mp3")
			    				var cheerSound = new Sound("./assets/cheering.wav")
			    				var bellCheerSound = new Sound("./assets/bellCheer.mp3")
								bellCheerSound.play();
								trace("WIN!\n");
								ringer.wait(3000)
							}
							state = PLAYING
							this.restingPoint = ringer.coordinates.bottom
                        ]]>
                    </method>
                    <method id="onComplete" params="content, message">
                        <![CDATA[
                            application.distribute("onReset")
                        ]]>
                    </method>
                </behavior>
    		</picture>
        </container>
		   
		    <picture anchor = "BASE" name = "base" height="219" url="'./assets/HighStriker_base.png'" >
		        <behavior>
	                <method id="onLoaded" params="picture">
	                    <![CDATA[
	                        baseHeight = picture.height
	                    ]]>
	                </method>
	            </behavior>
		        
		    </picture>
    	<behavior>
            <method id="onCreate" params="striker">
		        <![CDATA[

		        ]]>
		    </method>

			<method id="onCameraFollow" params="striker">
                 <![CDATA[
             	    this.startBottom = striker.coordinates.bottom;
                	this.endBottom = this.startBottom + delta * -1 //+ Math.min(sliderRange,application.first.height/2)
                	striker.time = 0;
                	striker.duration = theDuration;
					if(theDuration <250) debugger;
					striker.duration = theDuration;
					striker.start();
                 ]]>
			</method>
	        <method id="onTimeChanged" params="striker">
	            <![CDATA[
	                var coords = striker.coordinates
	                // different ease type for second half of movement
	                //  use an easeOut type that overshoots
	                this.easeType =  (striker.time > .5) ? "quadEaseOut" : "quadEaseIn";
	                coords.bottom = tween(striker.time,striker.duration,this.startBottom,this.endBottom, this.easeType)
	            	striker.coordinates = coords
	            ]]>
	        </method>
	        <method id="onFinished" params="striker">
				<![CDATA[

	                //trace("Striker ease: " + this.easeType + ", ");
				]]>
			</method>
		</behavior>
	</column>
	
    
    <skin id="whiteskin" color="white">
        
    </skin>
    <picture id="Hammer" left="0" width = "170" height = "170" bottom="55" url="'./assets/mallet_allamerican2.png'" exclusiveTouch = "true">
        <behavior>
        <method id="onLoaded" params="picture">
                <![CDATA[
                    picture.origin = {x:20,y:picture.height-15}
                    picture.scale = {x:.85,y:.85}
                ]]>
            </method>
            <method id="hammerRot" params="picture,result">
                <![CDATA[
                	if(result.signalQuality<50){
                		picture.active = true
                	}
                	else{
                		picture.active = false
                	}
                	this.startRot = picture.rotation;
                	this.endRot = result.signalQuality/3-40
                	picture.time=0
                    picture.duration=150
                    picture.start();
                ]]>
            </method>
            <method id="onTouchEnded" params="picture, id, x, y, ticks">
                <![CDATA[
                	this.startRot= picture.rotation
                	this.endRot= 45
                    picture.time=0
                    picture.duration=200
                    picture.start();
                    picture.exclusiveTouch = false;
                    picture.active = false;
                    picture.container.active = true;
                    state = WHACK
                ]]>
            </method>
            <method id="onTimeChanged" params="picture">
                <![CDATA[
                    var hammerPos
                    hammerPos = tween(picture.time,picture.duration,this.startRot,this.endRot, "quadEaseInOut");
                    picture.rotation=hammerPos
                ]]>
            </method>
            <method id="onFinished" params="picture">
                <![CDATA[
                    if(state == WHACK) { // hammer just came down.
                    	picture.stop();
                    	var Whap =  new Sound("./assets/WHAP!.mp3")
                    	Whap.play();
                    	this.startRot = picture.rotation
                    	this.endRot = -120
                    	picture.time = 0
                    	picture.duration = 400
                    	sensorUtils.mdelay(100);
                    	picture.start();
                    	state = PLAYING
                    }
                ]]>
            </method>
            
        </behavior>
    </picture>
    
<container id="maincont" top="0" left="0" bottom="0"
	    right="0" skin="whiteskin"  active = "false">  
	    <content left="225" bottom="15" width = "80" height = "80" >
			<skin texture="iconTexture" x="0" y="0" width="80" height="80">
				<variants offset="80" names="NG,OK,SOSO"/>
			</skin>
	        <behavior>
				<method id="onSignalChange" params="content,params">
	                <![CDATA[
	                    if (params.hasOwnProperty('visible')) {
	                    	content.visible = params.visible;
	                    }
	                    if (params.hasOwnProperty('variant')) {
	                    	content.variant = params.variant;
	                    }
	                ]]>
	            </method>        	
	        </behavior>
    	</content>
	       
	    <behavior>
	    	<method id="onCreate" params="container">
	            <![CDATA[
					lastAttention = 0
					//The following line kicks off a rnadom attention data generator
	                //container.wait(1000) // triggers onComplete after 1000 msecs
	                
	            ]]>
	        </method>
	        <method id="onComplete" params="container, message">
	            <![CDATA[
					application.invoke(new Message("/firePacket"))
					container.wait(1000) // repeat every second, like the Force Trainer
	            ]]>
	        </method>
	        <method id="onTouchEnded" params="container, id, x, y, ticks">
	            <![CDATA[
	            	trace("Game Reset\n")
	                application.distribute("onReset")
	            ]]>
	        </method>
	    </behavior> 
	</container>

	<handler path="/firePacket">
        <behavior>
            <method id="onInvoke" params="handler, message">
                <![CDATA[
                    var changeProbability = 1
                	var attention;
                	var rnd;
                    var changed = (Math.random() < changeProbability) ? true : false;
                    if (changed) {
	                    rnd = Math.random() * 100
						attention = Math.round(rnd)
					} else {
					 	attention = lastAttention;
					 }
					var state = PLAYING
					var msg = new Message("/gotPacket")
					msg.requestObject = {signalQuality:0, attention:attention, meditation:0, error:null}
					application.invoke(msg);
               ]]>
            </method>
        </behavior>
    </handler>

    <script>
        <![CDATA[
        	var PREPARING = 0;
        	var WHACK = 1;
        	var PLAYING = 2;
        	var WIN = 3;
        	var MOVING = 4;
	       	var state = PREPARING
        	var hammer
        	var appwin
        	var striker = new HighStriker
        	var signalState = {};
        	var difficulty = 0.80
        	var sliderRange, baseHeight, bellHeight
        	var theDuration = 0
        	var lastAttention;
        	
        	var buildUI = function() {
		       	state = PREPARING
        		appwin = new maincont
	        	striker = new HighStriker
	        	hammer = new Hammer
	        	appwin.add (striker);
	        	appwin.add (hammer);
	            application.add (appwin);
            }
            
            application.behavior = Behavior({
   				onLaunch: function(application) {
	                buildUI();
	                application.invoke(new MessageWithObject("pins:configure", {
	            		sensor: {
	                		require: "MindSetSerial",
	                		pins: {
	                        	eeg:{tx:31, rx:33} // rx not used, just avoids a warning
	                		}	
	                	},
	            		gumbell: {
	                		require: "Pinninator",
	                		pins: {
	                        	out:{pin:24} // back panel near a handy ground
	                		}	
	                	},
	                }
	            ), Message.TEXT);
			},

	onComplete: function(application, message) {
		trace("BLL configured.\n");
		application.invoke(new MessageWithObject("pins:/sensor/read?repeat=on&interval=50&callback=/gotData"));
	},
   
	onReset: function(application, message) {
		application.remove(application.first);
		buildUI();
   },
});

Handler.bind("/gotData", {
        onInvoke: function(handler, message) {
                var result = message.requestObject;
                for(p in result) {
                        switch (p) {
                case "signalQuality":
                		if (state===PREPARING){
                			application.distribute("hammerRot",{signalQuality:result.signalQuality})
                		}
                        if(result.signalQuality != 200) {
                    	signalState = {visible:true, variant:result.signalQuality < 47 ? OK : SOSO}
                   		application.distribute("onSignalChange", signalState);
                            var signalStrength = 200 - result.signalQuality;
                            //trace("Signal Strength: " + signalStrength/200*100 + "%\t");
                    } else {
                    	signalState = {visible:true, variant:NG}
                   		application.distribute("onSignalChange", signalState);
                		trace("Poor contact; please check the headset fit.\n")
                                        }
                    break;
                case "attention":
                	if(state===PLAYING){
                    	application.distribute("onAttentionChanged",{attention:result.attention})
                    }
                    break;
                case "meditation":
                    // Do something with this data in here
                    //trace("Meditation: " + result.meditation + "%");
                    break;
                case "error":
                        if(result.error) {
                            trace("Error: " + result.error + "\n");
                    }
                    break;
                default:
                    break;
            }
                }
        },

        onComplete: function(handler,message) {
                trace(message.requestObject + "\n");
        }
});
var tween = function(time,duration,start,end,easeType){
	var soFar = easeType ? Math[easeType](time/duration) : time/duration;
	var thisRot = (end-start)*soFar
	thisRot += start
	return thisRot
}

        ]]>
    </script>
</program>